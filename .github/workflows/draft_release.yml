name: WolvenKit-Draft-release
on:
  workflow_dispatch:
 
jobs:

  draft-wkit-win:
    runs-on: windows-latest

    steps:
    # setup  
    - name: checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x
    - uses: microsoft/setup-msbuild@v1.0.2

     # environmental variables
    - run: echo "PROJ=./WolvenKit/WolvenKit.csproj" >> $env:GITHUB_ENV
    - run: echo "PROJC=./WolvenKit.CLI/WolvenKit.CLI.csproj" >> $env:GITHUB_ENV
    - run: echo "OUT=./publish/app/" >> $env:GITHUB_ENV
    - run: echo "OUTC=./publish/console/" >> $env:GITHUB_ENV
    - run: echo "FINALOUT=./publish" >> $env:GITHUB_ENV
    - run: echo "NAME=WolvenKit" >> $env:GITHUB_ENV
    - run: echo "REF=${{github.ref}}" >> $env:GITHUB_ENV
    - run: echo "SHA=${{github.sha}}" >> $env:GITHUB_ENV
    - run: echo "MREPO=${{github.repository}}" >> $env:GITHUB_ENV
    
    - name: Get version
      uses: naminodarie/get-net-sdk-project-versions-action@v1
      id: get-version
      with:
        proj-path:  ${{env.PROJ}}
    - name: Get console version
      uses: naminodarie/get-net-sdk-project-versions-action@v1
      id: get-version-cli
      with:
        proj-path: ${{env.PROJC}}
        
    - run: echo "VERSION=${{steps.get-version.outputs.assembly-version}}" >> $env:GITHUB_ENV
    - run: echo "VERSIONC=${{steps.get-version-cli.outputs.assembly-version}}" >> $env:GITHUB_ENV
    
   # Publish app
    - run: msbuild ${{env.PROJ}} -t:restore -t:Build -t:Publish /p:PublishDir=".${{env.OUT}}" /p:InformationalVersion="${{env.VERSION}}" /p:Configuration=Release /p:Platform=x64 /p:SelfContained=False /p:PublishReadyToRun=False /p:PublishTrimmed=False
    
    # Publish console
    - run: msbuild ${{env.PROJC}} -t:restore -t:Build -t:Publish /p:PublishDir=".${{env.OUTC}}" /p:Configuration=Release /p:Platform=x64 /p:SelfContained=False /p:PublishReadyToRun=False /p:PublishTrimmed=False

    - run: echo "PORTABLE=${{env.NAME}}-${{env.VERSION}}.zip" >> $env:GITHUB_ENV
    - run: echo "CONSOLE=${{env.NAME}}.Console-${{env.VERSIONC}}.zip" >> $env:GITHUB_ENV
    - run: echo "INSTALLER=${{env.NAME}}-installer-${{env.VERSION}}.exe" >> $env:GITHUB_ENV
    - run: echo "MANIFEST=manifest.json" >> $env:GITHUB_ENV

    # Create assets
    # create zip
    #- run: ${{env.OUT}}/WolvenManager.Installer.exe create -a ${{env.OUT}}${{env.NAME}}.exe -o ${{env.FINALOUT}}
    - run: Compress-Archive -Path ${{env.OUT}} -DestinationPath ${{env.FINALOUT}}/${{env.PORTABLE}}
    - run: Compress-Archive -Path ${{env.OUTC}} -DestinationPath ${{env.FINALOUT}}/${{env.CONSOLE}}
    # create installer
    - run: .\Installers\ISCC\ISCC.exe /O"${{env.FINALOUT}}" /dMyAppBaseDir=".${{env.OUT}}" .\Installers\installer.iss
    # create manifest
    - run: ${{env.OUT}}/WolvenManager.Installer.exe manifest -a ${{env.OUT}}${{env.NAME}}.exe -i ${{env.FINALOUT}} -o ${{env.FINALOUT}}

    # RELEASE
    - name: Release
      run: |
          gh release create ${{ env.VERSION }} -t "${{env.NAME}} v${{env.VERSION}}" -F ./CHANGELOG.md -d -p ${{ env.FILES }}
      env:
        FILES: ${{env.FINALOUT}}/${{env.PORTABLE}} ${{env.FINALOUT}}/${{env.CONSOLE}} ${{env.FINALOUT}}/${{env.INSTALLER}} ${{env.FINALOUT}}/${{env.MANIFEST}}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
