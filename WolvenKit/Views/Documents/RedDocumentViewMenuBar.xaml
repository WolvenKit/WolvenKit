<reactiveUi:ReactiveUserControl x:TypeArguments="documents:RedDocumentViewToolbarModel"
                                x:Class="WolvenKit.Views.Documents.RedDocumentViewMenuBar"
                                x:Name="RedDocumentViewToolbarControl"
                                xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                                xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                                xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                                xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                                xmlns:reactiveUi="http://reactiveui.net"
                                xmlns:documents="clr-namespace:WolvenKit.App.ViewModels.Documents;assembly=WolvenKit.App"
                                xmlns:converters="clr-namespace:WolvenKit.Converters"
                                mc:Ignorable="d"
                                d:DesignHeight="30" d:DesignWidth="800">

    <Grid>

        <Grid.Resources>

            <converters:HasMenuChildrenVisibilityConverter x:Key="HasMenuChildrenVisibilityConverter" />

            <!-- styles the whole menu bar -->
            <Style x:Key="MenuStyle" TargetType="{x:Type Menu}">
                <Setter Property="Height" Value="25" />
                <Setter Property="Margin" Value="0" />
                <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey1}" />
                <Setter Property="Background" Value="{StaticResource BackgroundColor_Frame_Background}" />
            </Style>

            <!-- Menu Bar Entry Style -->
            <Style x:Key="WolvenKitToolBarItem" TargetType="{x:Type MenuItem}">
                <Setter Property="Margin" Value="3 4 3 0" />
                <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey1}" />
                <Setter Property="Visibility"
                        Value="{Binding RelativeSource={RelativeSource Self}, Converter={StaticResource HasMenuChildrenVisibilityConverter}}" />
                
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="False">
                        <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey_Dark}" />
                        <Setter Property="Background" Value="{StaticResource BackgroundColor_Button_Inactive}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- Editor Modes & Toggle -->
            <Style x:Key="EditorModeDisplayStyle" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource WolvenKitToolBarItem}">
                <Setter Property="Margin" Value="0" />
                <Setter Property="Padding" Value="8" />
                <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Cyan}" />
                <Setter Property="Background" Value="{StaticResource BackgroundColor_Cyan}" />
            </Style>

            <!-- Menu Item Style (in dropdown) -->
            <Style x:Key="WolvenKitNestedMenuItem" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource WolvenKitToolBarItem}">
                <Setter Property="Height" Value="25" />
                <Setter Property="Padding" Value="2 6 0 6" />
                <Setter Property="Margin" Value="2 0" />
                <Setter Property="BorderBrush" Value="{StaticResource BackgroundColor_Frame_Background}" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}" Value="False">
                        <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey_Dark}" />
                        <Setter Property="Background" Value="{StaticResource BackgroundColor_Button_Inactive}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>


            <!-- ============================================================== -->
            <!-- Visibility by file type -->
            <!-- ============================================================== -->

            <!-- menu item: Mesh -->
            <Style x:Key="MenuItemInMeshFileStyle" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource WolvenKitNestedMenuItem}">
                <Setter Property="Visibility" Value="Collapsed" />
                <Style.Triggers>
                    <DataTrigger
                        Binding="{Binding Path=ContentType, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static documents:RedDocumentItemType.Mesh}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- menu item: Mesh or Mi -->
            <Style x:Key="MenuItemInMaterialFileStyle" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MenuItemInMeshFileStyle}">
                <Style.Triggers>
                    <DataTrigger
                        Binding="{Binding  Path=ContentType, UpdateSourceTrigger=PropertyChanged}" Value="{x:Static documents:RedDocumentItemType.Mi}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- toolbar button: mesh -->
            <Style x:Key="ToolbarItemInMeshFileStyle" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource WolvenKitToolBarItem}">
                <Setter Property="Visibility" Value="Collapsed" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=ContentType, UpdateSourceTrigger=PropertyChanged}"
                                 Value="{x:Static documents:RedDocumentItemType.Mesh}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- toolbar button: mesh -->
            <Style x:Key="ToolbarItemInMeshOrAppFileStyle" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource WolvenKitToolBarItem}">
                <Setter Property="Visibility" Value="Collapsed" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=ContentType, UpdateSourceTrigger=PropertyChanged}"
                                 Value="{x:Static documents:RedDocumentItemType.Mesh}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=ContentType, UpdateSourceTrigger=PropertyChanged}"
                                 Value="{x:Static documents:RedDocumentItemType.App}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- toolbar button: cleanup (mesh or json) -->
            <Style x:Key="CleanupMenuVisibilityStyle" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource WolvenKitToolBarItem}">
                <Setter Property="Visibility" Value="Collapsed" />
                <Style.Triggers>
                    <DataTrigger
                        Binding="{Binding  Path=ContentType, UpdateSourceTrigger=PropertyChanged}"
                        Value="{x:Static documents:RedDocumentItemType.Mesh}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding  Path=ContentType, UpdateSourceTrigger=PropertyChanged}"
                        Value="{x:Static documents:RedDocumentItemType.Json}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- toolbar button: (mesh or mi) -->
            <Style x:Key="ToolbarItemInMaterialFileStyle" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource ToolbarItemInMeshFileStyle}">
                <Style.Triggers>
                    <DataTrigger
                        Binding="{Binding  Path=ContentType, UpdateSourceTrigger=PropertyChanged}"
                        Value="{x:Static documents:RedDocumentItemType.Mi}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- menu item: JSON -->
            <Style x:Key="MenuItemInJsonFileStyle" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource WolvenKitNestedMenuItem}">
                <Setter Property="Visibility" Value="Collapsed" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=ContentType, UpdateSourceTrigger=PropertyChanged}"
                                 Value="{x:Static documents:RedDocumentItemType.Json}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- menu item: .app -->
            <Style x:Key="MenuItemInAppFileStyle" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource WolvenKitNestedMenuItem}">
                <Setter Property="Visibility" Value="Collapsed" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding  Path=ContentType, UpdateSourceTrigger=PropertyChanged}"
                                 Value="{x:Static documents:RedDocumentItemType.App}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- menu item: .mesh or .app -->
            <Style x:Key="MenuItemInMeshOrAppFileStyle" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource WolvenKitNestedMenuItem}">
                <Style.Triggers>
                    <DataTrigger Binding="{Binding  Path=ContentType, UpdateSourceTrigger=PropertyChanged}"
                                 Value="{x:Static documents:RedDocumentItemType.Mesh}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding  Path=ContentType, UpdateSourceTrigger=PropertyChanged}"
                                 Value="{x:Static documents:RedDocumentItemType.App}">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- ============================================================== -->

            <Style x:Key="ShowInMeshWithShiftKeyStyle" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource WolvenKitNestedMenuItem}">
                <Style.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=ContentType, UpdateSourceTrigger=PropertyChanged}"
                                       Value="{x:Static documents:RedDocumentItemType.Mesh}" />
                            <Condition Binding="{Binding Path=IsShiftKeyDown}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Visibility" Value="Visible" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=ContentType, UpdateSourceTrigger=PropertyChanged}"
                                       Value="{x:Static documents:RedDocumentItemType.Mesh}" />
                            <Condition Binding="{Binding Path=IsShiftKeyDown}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Visibility" Value="Collapsed" />
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>
            
            <Style x:Key="ShowInMeshWithShiftKeyUpStyle" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource WolvenKitToolBarItem}">
                <Setter Property="Height" Value="25" />
                <Setter Property="Padding" Value="2 6 0 6" />
                <Setter Property="Margin" Value="2 0" />
                <Setter Property="BorderBrush" Value="{StaticResource BackgroundColor_Frame_Background}" />
                <Style.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=ContentType, UpdateSourceTrigger=PropertyChanged}"
                                       Value="{x:Static documents:RedDocumentItemType.Mesh}" />
                            <Condition Binding="{Binding Path=IsShiftKeyDown}" Value="False" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Visibility" Value="Visible" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=ContentType, UpdateSourceTrigger=PropertyChanged}"
                                       Value="{x:Static documents:RedDocumentItemType.Mesh}" />
                            <Condition Binding="{Binding Path=IsShiftKeyDown}" Value="True" />
                        </MultiDataTrigger.Conditions>
                        <Setter Property="Visibility" Value="Collapsed" />
                    </MultiDataTrigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="EditorModeDisplayStyle_Yellow" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource EditorModeDisplayStyle}">
                <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Yellow}" />
                <Setter Property="Background" Value="{StaticResource BackgroundColor_Yellow}" />
            </Style>
            <Style x:Key="EditorModeDisplayStyle_Red" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource EditorModeDisplayStyle}">
                <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Red}" />
                <Setter Property="Background" Value="{StaticResource BackgroundColor_Red}" />
            </Style>


            <Style x:Key="EditorModeParentDisplayStyle" TargetType="{x:Type MenuItem}">
                <Setter Property="Opacity" Value="50" />
                <Setter Property="Margin" Value="0" />
                <Setter Property="Padding" Value="5" />
                <Setter Property="Header" Value="Editor Mode" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding  Path=EditorLevel}" Value="Easy">
                        <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Cyan}" />
                        <Setter Property="Background" Value="{StaticResource BackgroundColor_Cyan}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding  Path=EditorLevel}" Value="Default">
                        <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Yellow}" />
                        <Setter Property="Background" Value="{StaticResource BackgroundColor_Yellow}" />
                    </DataTrigger>
                    <DataTrigger Binding="{Binding  Path=EditorLevel}" Value="Advanced">
                        <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Red}" />
                        <Setter Property="Background" Value="{StaticResource BackgroundColor_Red}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

        </Grid.Resources>

        <Menu x:Name="MenuBar" Style="{StaticResource MenuStyle}">

            <!-- Run file validation -->
            <MenuItem Style="{StaticResource EditorModeParentDisplayStyle}">
                <MenuItem Header="Easy" Click="OnEditorModeClick_Easy" Style="{StaticResource EditorModeDisplayStyle}" />
                <MenuItem Header="Default" Click="OnEditorModeClick_Default" Style="{StaticResource EditorModeDisplayStyle_Yellow}" />
                <MenuItem Header="Advanced" Click="OnEditorModeClick_Advanced" Style="{StaticResource EditorModeDisplayStyle_Red}" />
            </MenuItem>

            <!-- Run file validation -->
            <MenuItem Header="File Validation" Style="{StaticResource WolvenKitToolBarItem}">
                <MenuItem Header="Run FileValidation" Click="OnFileValidationClick" />
            </MenuItem>

            <!-- Mesh file: Materials menu -->
            <MenuItem Header="Materials" Style="{StaticResource ToolbarItemInMaterialFileStyle}">

                <!-- Generate missing materials -->
                <MenuItem Header="Generate missing material entries"
                          IsEnabled="{Binding Path=IsGenerateMaterialCommandEnabled}"
                          Click="OnGenerateMissingMaterialsClick" />

                <!-- Scroll to material -->
                <MenuItem Header="Scroll to material"
                          IsEnabled="{Binding  Path=IsScrollToMaterialCommandEnabled, Mode=OneWay}"
                          Click="OnScrollToMaterialClick" />

                <!-- Scroll to material -->
                <MenuItem Header="Toggle 'IsLocalInstance'"
                          IsEnabled="{Binding  Path=IsMaterialDefinition, Mode=OneWay}"
                          Click="OnToggleLocalInstanceClick" />

                <!-- Shift: "Add material dependencies" -->
                <MenuItem Header="Add material dependencies"
                          ToolTip="Will run 'delete unused materials' first"
                          Visibility="{ Binding  Path=IsAddDependenciesCommandEnabled, Converter={ StaticResource BooleanToVisibilityConverter}}"
                          Click="OnAddDependenciesClick" />

                <!-- Shift: "Add material dependencies (include basegame files)" -->
                <MenuItem Header="Add material dependencies (include basegame files)"
                          ToolTip="Will run 'delete unused materials' first"
                          Visibility="{ Binding  Path=IsAddDependenciesCommandEnabledAndShiftKeyDown, Converter={ StaticResource BooleanToVisibilityConverter}}"
                          Click="OnAddDependenciesClick" />

            </MenuItem>

            <!-- Mesh file: Clean up menu -->
            <MenuItem Header="Clean up" Style="{StaticResource CleanupMenuVisibilityStyle}">

                <!-- Convert preload materials -->
                <MenuItem Header="Convert preload materials to local"
                          Style="{StaticResource MenuItemInMeshFileStyle}"
                          IsEnabled="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}"
                          Click="OnConvertLocalMaterialsClick" />

                <!-- No shift: "Delete unused Materials" -->
                <MenuItem Header="Delete unused materials"
                          Style="{StaticResource ShowInMeshWithShiftKeyUpStyle}"
                          IsEnabled="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}"
                          Click="OnDeleteUnusedMaterialsClick" />

                <!-- Shift: "Clear all Materials" -->
                <MenuItem Header="Clear all materials"
                          Style="{StaticResource ShowInMeshWithShiftKeyStyle}"
                          IsEnabled="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}"
                          Click="OnClearAllMaterialsClick" />

                <!-- No shift: "Delete empty submeshes" -->
                <MenuItem Header="Delete empty submeshes"
                          Style="{StaticResource ShowInMeshWithShiftKeyUpStyle}"
                          IsEnabled="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}"
                          Click="OnDeleteEmptySubmeshesClick" />

                <!-- JSON: Delete duplicate entries -->
                <MenuItem Header="Delete duplicate entries"
                          Style="{StaticResource MenuItemInJsonFileStyle}"
                          IsEnabled="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}}"
                          Click="OnDeleteDuplicateEntriesClick" />
            </MenuItem>
            
            <!-- Ent file: Appearances menu -->
            <MenuItem Header="Appearances"
                      Style="{StaticResource ToolbarItemInMeshOrAppFileStyle}">

                <!-- Regenerate controllers -->
                <MenuItem
                    Header="Regenerate visual controllers" Click="OnRegenerateControllersClick"
                    Visibility="{ Binding  Path=IsRegenerateMaterialCommandEnabled, Mode=OneWay, Converter={ StaticResource BooleanToVisibilityConverter}}" />

                <!-- Regenerate controllers -->
                <MenuItem Header="Change chunk view by component" Click="OnChangeChunkMasksClick" Style="{StaticResource MenuItemInAppFileStyle}" />

            </MenuItem>

            <!--CRUIDs -->
            <MenuItem Header="Generate CRUID"
                      Visibility="{Binding Path=IsGenerateNewCruidCommandEnabled, Mode=OneWay, Converter={StaticResource BooleanToVisibilityConverter}}"
                      Style="{StaticResource WolvenKitToolBarItem}"
                      Click="OnGenerateNewCruidClick">
            </MenuItem>
            
            
        </Menu>
    </Grid>
</reactiveUi:ReactiveUserControl>