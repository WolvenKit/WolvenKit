<UserControl
    x:Class="WolvenKit.Views.Documents.SceneGraphView"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:documents="clr-namespace:WolvenKit.App.ViewModels.Documents;assembly=WolvenKit.App"
    xmlns:local="clr-namespace:WolvenKit.Views.Documents"
    xmlns:graphEditor="clr-namespace:WolvenKit.Views.GraphEditor"
    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
    xmlns:shell="clr-namespace:WolvenKit.App.ViewModels.Shell;assembly=WolvenKit.App"
    xmlns:tools="clr-namespace:WolvenKit.Views.Tools"
    xmlns:editors="clr-namespace:WolvenKit.Views.Editors"
    xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
    xmlns:nodify="https://miroiu.github.io/nodify"
    xmlns:sceneNodes="clr-namespace:WolvenKit.App.ViewModels.GraphEditor.Nodes.Scene.Internal;assembly=WolvenKit.App"
    xmlns:templates="clr-namespace:WolvenKit.Views.Templates"
    mc:Ignorable="d"
    d:DataContext="{d:DesignInstance documents:SceneGraphViewModel,
                                     IsDesignTimeCreatable=False}"
    d:DesignHeight="800"
    d:DesignWidth="1200"
    PreviewKeyDown="SceneGraphView_OnPreviewKeyDown">
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <!-- Merge Scene Editor specific converters -->
                <ResourceDictionary Source="/WolvenKit;component/Resources/Converters/SceneEditorConverters.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <Style
                x:Key="SpacedWolvenKitTabControl"
                BasedOn="{StaticResource WolvenKitTabControl}"
                TargetType="{x:Type syncfusion:TabControlExt}">
                <Setter Property="TabItemHoverBackground" Value="{StaticResource WolvenKitRed}" />
                <Setter Property="TabItemHoverBorderBrush" Value="{StaticResource WolvenKitRed}" />
                <Setter Property="TabItemSelectedBackground" Value="{StaticResource WolvenKitRedShadow}" />
                <Setter Property="TabItemSelectedBorderBrush" Value="{StaticResource WolvenKitRedShadow}" />
            </Style>

            <Style
                x:Key="SpacedTabItemStyle"
                BasedOn="{StaticResource SyncfusionTabItemExtStyle}"
                TargetType="{x:Type syncfusion:TabItemExt}">
                <Setter Property="Margin" Value="0,0,2,0" />
                <Setter Property="Padding" Value="{DynamicResource WolvenKitMarginTiny}" />
            </Style>

            <!-- Scene Connection Template with Variable Thickness -->
            <DataTemplate
                x:Key="SceneConnectionTemplate"
                DataType="{x:Type sceneNodes:SceneConnectionViewModel}">
                <nodify:Connection
                    Source="{Binding Source.Anchor}"
                    SourceOffset="7,0"
                    SourceOffsetMode="Static"
                    Target="{Binding Target.Anchor}"
                    TargetOffset="7,0"
                    TargetOffsetMode="Static"
                    IsSelectable="True"
                    IsSelected="{Binding IsSelected}"
                    MouseRightButtonDown="Connection_OnRightClick">
                    <nodify:Connection.Style>
                        <Style TargetType="{x:Type nodify:BaseConnection}">
                            <Setter Property="Cursor" Value="Hand" />
                            <Setter Property="Opacity" Value="1.0" />
                            <Setter Property="Stroke" Value="#FF7F7F7F" />
                            <Setter Property="StrokeThickness" Value="{Binding PathType, Converter={StaticResource PathTypeToThicknessConverter}}" />

                            <Style.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Stroke" Value="{StaticResource WolvenKitYellow}" />
                                </Trigger>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Stroke" Value="{StaticResource WolvenKitGreen}" />
                                </Trigger>
                            </Style.Triggers>
                        </Style>
                    </nodify:Connection.Style>
                </nodify:Connection>
            </DataTemplate>

            <!-- Info bar text styles -->
            <Style
                x:Key="Label"
                TargetType="TextBlock">
                <Setter Property="FontSize" Value="{DynamicResource WolvenKitFontAltTitle}" />
                <Setter Property="Foreground" Value="Gray" />
                <Setter Property="Margin" Value="{DynamicResource WolvenKitMarginTinyRight}" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>

            <Style
                x:Key="Value"
                TargetType="TextBlock">
                <Setter Property="FontSize" Value="{DynamicResource WolvenKitFontSubTitle}" />
                <Setter Property="Foreground" Value="White" />
                <Setter Property="Margin" Value="{DynamicResource WolvenKitMarginRight}" />
                <Setter Property="VerticalAlignment" Value="Center" />
            </Style>

            <!-- Button Style for Add Actor/Prop buttons -->
            <Style
                x:Key="SceneEditorButtonStyle"
                TargetType="Button">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderBrush" Value="{StaticResource WolvenKitRedShadow}" />
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="Cursor" Value="Hand" />
                <Setter Property="FontWeight" Value="Medium" />
                <Setter Property="Foreground" Value="{StaticResource WolvenKitRedShadow}" />
                <Setter Property="Margin" Value="{DynamicResource WolvenKitMarginTinyRight}" />
                <Setter Property="Padding" Value="8,4" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border
                                x:Name="border"
                                Padding="{TemplateBinding Padding}"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}">
                                <ContentPresenter
                                    HorizontalAlignment="Center"
                                    VerticalAlignment="Center" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="White" />
                                    <Setter TargetName="border" Property="Background" Value="{StaticResource WolvenKitRed}" />
                                    <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource WolvenKitRed}" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Foreground" Value="White" />
                                    <Setter TargetName="border" Property="Background" Value="{StaticResource WolvenKitRedShadow}" />
                                    <Setter TargetName="border" Property="BorderBrush" Value="{StaticResource WolvenKitRedShadow}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

        </ResourceDictionary>
    </UserControl.Resources>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
        </Grid.RowDefinitions>

        <!-- Toolbar -->
        <Border
            Grid.Row="0"
            Padding="{DynamicResource WolvenKitMarginTinyHorizontal}"
            Background="{StaticResource ContentBackground}"
            BorderBrush="{StaticResource BorderAlt}"
            BorderThickness="0,0,0,1">
            <StackPanel Orientation="Horizontal">
                <templates:IconBox
                    IconPack="Material"
                    Kind="InformationOutline"
                    Margin="{DynamicResource WolvenKitMarginTiny}"
                    Size="{DynamicResource WolvenKitIconMicro}" />

                <TextBlock
                    Margin="{DynamicResource WolvenKitMarginRight}"
                    VerticalAlignment="Center"
                    Foreground="White"
                    FontSize="{DynamicResource WolvenKitFontSubTitle}"
                    FontWeight="Medium"
                    Text="{Binding SceneTitleWithCategory}" />

                <TextBlock
                    Style="{StaticResource Label}"
                    Text="Total Nodes:" />

                <TextBlock
                    Style="{StaticResource Value}"
                    Text="{Binding TotalNodes}" />

                <TextBlock
                    Style="{StaticResource Label}"
                    Text="Actors:" />

                <TextBlock
                    Style="{StaticResource Value}"
                    Text="{Binding TotalActors}" />

                <TextBlock
                    Style="{StaticResource Label}"
                    Text="Props:" />

                <TextBlock
                    Style="{StaticResource Value}"
                    Text="{Binding TotalProps}" />

                <TextBlock
                    Style="{StaticResource Label}"
                    Text="Choices:" />

                <TextBlock
                    Style="{StaticResource Value}"
                    Text="{Binding TotalChoices}" />

                <TextBlock
                    Style="{StaticResource Label}"
                    Text="Dialogues:" />

                <TextBlock
                    Style="{StaticResource Value}"
                    Text="{Binding TotalDialogues}" />
            </StackPanel>
        </Border>

        <!-- Main Content -->
        <Grid Grid.Row="1">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="2*" />
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition Width="3*" />
            </Grid.ColumnDefinitions>

            <!-- Left Panel: Curated Tab Control -->
            <syncfusion:TabControlExt
                Grid.Column="0"
                Style="{StaticResource SpacedWolvenKitTabControl}"
                ItemContainerStyle="{StaticResource SpacedTabItemStyle}"
                ItemsSource="{Binding Tabs}"
                SelectedItem="{Binding SelectedTab,
                                       Mode=TwoWay}"
                EnableLabelEdit="False">
                <syncfusion:TabControlExt.ItemTemplate>
                    <DataTemplate DataType="{x:Type documents:SceneTabDefinition}">
                        <StackPanel Orientation="Horizontal">
                            <iconPacks:PackIconMaterial
                                Kind="{Binding Icon}"
                                Width="{DynamicResource WolvenKitIconTiny}"
                                Height="{DynamicResource WolvenKitIconTiny}"
                                Margin="{DynamicResource WolvenKitMarginSmallRight}"
                                VerticalAlignment="Center" />
                            <TextBlock
                                VerticalAlignment="Center"
                                Text="{Binding Header}" />
                        </StackPanel>
                    </DataTemplate>
                </syncfusion:TabControlExt.ItemTemplate>
                <syncfusion:TabControlExt.ContentTemplate>
                    <DataTemplate DataType="{x:Type documents:SceneTabDefinition}">
                        <Grid>
                            <!-- Traditional tree view layout for all tabs except Node Properties -->
                            <Grid>
                                <Grid.Style>
                                    <Style TargetType="Grid">
                                        <Setter Property="Visibility" Value="Visible" />
                                        <Style.Triggers>
                                            <!-- Hide traditional view for Node Properties tab -->
                                            <DataTrigger
                                                Binding="{Binding Header}"
                                                Value="Node Properties">
                                                <Setter Property="Visibility" Value="Collapsed" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Grid.Style>

                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>

                                <!-- Button Bar -->
                                <Border
                                    Grid.Row="0"
                                    Padding="8,4"
                                    Background="{StaticResource ContentBackgroundAlt}"
                                    BorderBrush="{StaticResource BorderAlt}"
                                    BorderThickness="0,1,0,1"
                                    Visibility="{Binding DataContext.IsButtonBarVisible,
                                                         RelativeSource={RelativeSource AncestorType={x:Type local:SceneGraphView}},
                                                         Converter={StaticResource BooleanToVisibilityConverter}}">
                                    <StackPanel
                                        Margin="5"
                                        Orientation="Horizontal">
                                        <Button
                                            Style="{StaticResource SceneEditorButtonStyle}"
                                            Visibility="{Binding DataContext.IsActorCreationVisible,
                                                                 RelativeSource={RelativeSource AncestorType={x:Type local:SceneGraphView}},
                                                                 Converter={StaticResource BooleanToVisibilityConverter}}"
                                            Content="+ Add Actor"
                                            Command="{Binding DataContext.CreateNewActorCommand,
                                                              RelativeSource={RelativeSource AncestorType={x:Type local:SceneGraphView}}}" />
                                        <Button
                                            Style="{StaticResource SceneEditorButtonStyle}"
                                            Visibility="{Binding DataContext.IsPropCreationVisible,
                                                                 RelativeSource={RelativeSource AncestorType={x:Type local:SceneGraphView}},
                                                                 Converter={StaticResource BooleanToVisibilityConverter}}"
                                            Content="+ Add Prop"
                                            Command="{Binding DataContext.CreateNewPropCommand,
                                                              RelativeSource={RelativeSource AncestorType={x:Type local:SceneGraphView}}}" />
                                        <Button
                                            Style="{StaticResource SceneEditorButtonStyle}"
                                            Visibility="{Binding DataContext.IsDialogueCreationVisible,
                                                                 RelativeSource={RelativeSource AncestorType={x:Type local:SceneGraphView}},
                                                                 Converter={StaticResource BooleanToVisibilityConverter}}"
                                            Content="+ Add Dialogue"
                                            Command="{Binding DataContext.CreateNewDialogueCommand,
                                                              RelativeSource={RelativeSource AncestorType={x:Type local:SceneGraphView}}}" />
                                        <Button
                                            Style="{StaticResource SceneEditorButtonStyle}"
                                            Visibility="{Binding DataContext.IsOptionCreationVisible,
                                                                 RelativeSource={RelativeSource AncestorType={x:Type local:SceneGraphView}},
                                                                 Converter={StaticResource BooleanToVisibilityConverter}}"
                                            Content="+ Add Option"
                                            Command="{Binding DataContext.CreateNewOptionCommand,
                                                              RelativeSource={RelativeSource AncestorType={x:Type local:SceneGraphView}}}" />
                                        <Button
                                            Style="{StaticResource SceneEditorButtonStyle}"
                                            Visibility="{Binding DataContext.IsAnimationCreationVisible,
                                                                 RelativeSource={RelativeSource AncestorType={x:Type local:SceneGraphView}},
                                                                 Converter={StaticResource BooleanToVisibilityConverter}}"
                                            Content="+ Add Animation"
                                            Command="{Binding DataContext.CreateNewAnimationCommand,
                                                              RelativeSource={RelativeSource AncestorType={x:Type local:SceneGraphView}}}" />
                                        <Button
                                            Style="{StaticResource SceneEditorButtonStyle}"
                                            Visibility="{Binding DataContext.IsWorkspotCreationVisible,
                                                                 RelativeSource={RelativeSource AncestorType={x:Type local:SceneGraphView}},
                                                                 Converter={StaticResource BooleanToVisibilityConverter}}"
                                            Content="+ Add Workspot"
                                            Command="{Binding DataContext.CreateNewWorkspotCommand,
                                                              RelativeSource={RelativeSource AncestorType={x:Type local:SceneGraphView}}}" />
                                        <Button
                                            Margin="0"
                                            Style="{StaticResource SceneEditorButtonStyle}"
                                            Visibility="{Binding DataContext.IsEffectCreationVisible,
                                                                 RelativeSource={RelativeSource AncestorType={x:Type local:SceneGraphView}},
                                                                 Converter={StaticResource BooleanToVisibilityConverter}}"
                                            Content="+ Add Effect"
                                            Command="{Binding DataContext.CreateNewEffectCommand,
                                                              RelativeSource={RelativeSource AncestorType={x:Type local:SceneGraphView}}}" />
                                    </StackPanel>
                                </Border>

                                <Grid Grid.Row="1">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="3*" />
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="2*" />
                                    </Grid.ColumnDefinitions>

                                    <!-- RedTreeView bound directly to the filtered ICollectionView -->
                                    <tools:RedTreeView
                                        Grid.Column="0"
                                        ItemsSource="{Binding DataContext.SelectedTabContent,
                                                              RelativeSource={RelativeSource AncestorType={x:Type local:SceneGraphView}}}"
                                        SelectedItem="{Binding DataContext.RDTViewModel.SelectedChunk,
                                                               RelativeSource={RelativeSource AncestorType={x:Type local:SceneGraphView}},
                                                               Mode=TwoWay}"
                                        SelectedItems="{Binding DataContext.RDTViewModel.SelectedChunks,
                                                                RelativeSource={RelativeSource AncestorType={x:Type local:SceneGraphView}},
                                                                Mode=TwoWay}" />

                                    <GridSplitter
                                        Grid.Column="1"
                                        Width="4"
                                        HorizontalAlignment="Stretch"
                                        Background="#FF404040" />

                                    <editors:RedTypeView
                                        Grid.Column="2"
                                        DataContext="{Binding DataContext.RDTViewModel.SelectedChunk,
                                                              RelativeSource={RelativeSource AncestorType={x:Type local:SceneGraphView}}}" />
                                </Grid>
                            </Grid>

                            <!-- Node Properties tab shows our custom selection-driven view -->
                            <local:NodePropertiesView>
                                <local:NodePropertiesView.Style>
                                    <Style TargetType="local:NodePropertiesView">
                                        <Setter Property="Visibility" Value="Collapsed" />
                                        <Style.Triggers>
                                            <DataTrigger
                                                Binding="{Binding Header}"
                                                Value="Node Properties">
                                                <Setter Property="Visibility" Value="Visible" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </local:NodePropertiesView.Style>
                            </local:NodePropertiesView>
                        </Grid>
                    </DataTemplate>
                </syncfusion:TabControlExt.ContentTemplate>
            </syncfusion:TabControlExt>

            <!-- Grid Splitter -->
            <GridSplitter
                Grid.Column="1"
                Width="4"
                HorizontalAlignment="Stretch"
                Background="#FF404040" />

            <!-- Right Panel: Graph Editor -->
            <Grid Grid.Column="2">
                <graphEditor:GraphEditorView
                    x:Name="SceneGraphEditor"
                    Source="{Binding MainGraph}" />

                <!-- Loading Overlay -->
                <Border
                    Background="#AA000000"
                    Visibility="{Binding IsGraphLoading,
                                         Converter={StaticResource BooleanToVisibilityConverter}}">
                    <StackPanel
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center">
                        <templates:IconBox
                            IconPack="Material"
                            Kind="GraphOutline"
                            Margin="{DynamicResource WolvenKitMarginBottom}"
                            HorizontalAlignment="Center"
                            Size="{DynamicResource WolvenKitIconHuge}"
                            Foreground="{StaticResource WolvenKitYellow}">
                            <templates:IconBox.RenderTransform>
                                <RotateTransform />
                            </templates:IconBox.RenderTransform>
                            <templates:IconBox.Triggers>
                                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                    <BeginStoryboard>
                                        <Storyboard RepeatBehavior="Forever">
                                            <DoubleAnimation
                                                Storyboard.TargetProperty="RenderTransform.Angle"
                                                From="0"
                                                To="360"
                                                Duration="0:0:2" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </EventTrigger>
                            </templates:IconBox.Triggers>
                        </templates:IconBox>

                        <TextBlock
                            HorizontalAlignment="Center"
                            Foreground="White"
                            FontSize="{DynamicResource WolvenKitFontMedium}"
                            FontWeight="Medium"
                            Text="Loading scene graph..." />

                        <TextBlock
                            Margin="{DynamicResource WolvenKitMarginTinyTop}"
                            HorizontalAlignment="Center"
                            Foreground="Gray"
                            FontSize="{DynamicResource WolvenKitFontSubTitle}"
                            Text="Building nodes and connections" />
                    </StackPanel>
                </Border>
            </Grid>
        </Grid>
    </Grid>
</UserControl>
