<reactiveUi:ReactiveUserControl
    x:Class="WolvenKit.Views.Tools.RedTreeView"
    x:TypeArguments="tools:RedTreeViewViewModel"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:converters="clr-namespace:WolvenKit.Converters"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:reactiveUi="http://reactiveui.net"
    xmlns:tools="clr-namespace:WolvenKit.App.ViewModels.Tools;assembly=WolvenKit.App"
    xmlns:shell="clr-namespace:WolvenKit.App.ViewModels.Shell;assembly=WolvenKit.App"
    xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
    xmlns:treeViewEngine="clr-namespace:Syncfusion.UI.Xaml.TreeView.Engine;assembly=Syncfusion.SfTreeView.WPF"
    xmlns:templates="clr-namespace:WolvenKit.Views.Templates"
    mc:Ignorable="d"
    d:DesignWidth="800"
    d:DesignHeight="450"
    x:Name="redTreeView">

    <UserControl.Resources>
        <ResourceDictionary>
            <!-- StackPanel: empty value style -->
            <Style
                x:Key="VisibleOnEmptyValueStyle"
                TargetType="StackPanel">
                <Setter Property="Visibility" Value="Collapsed" />
                <Style.Triggers>
                    <DataTrigger
                        Binding="{Binding Value,
                                          Mode=OneWay,
                                          UpdateSourceTrigger=PropertyChanged}"
                        Value="">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding IsValueExtrapolated,
                                          Mode=OneWay,
                                          UpdateSourceTrigger=PropertyChanged}"
                        Value="True">
                        <Setter Property="Visibility" Value="Visible" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- PropertyKeyStyle for TextBlock -->
            <Style
                x:Key="PropertyKeyStyle"
                TargetType="TextBlock">
                <Style.Triggers>
                    <DataTrigger
                        Binding="{Binding Value,
                                          Mode=OneWay,
                                          UpdateSourceTrigger=PropertyChanged}"
                        Value="null">
                        <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey1}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding IsDefault,
                                          Mode=OneWay,
                                          UpdateSourceTrigger=PropertyChanged}"
                        Value="True">
                        <Setter Property="FontStyle" Value="Italic" />
                        <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey_Dark}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding DisplayAsArrayItem,
                                          Mode=OneWay,
                                          UpdateSourceTrigger=PropertyChanged}"
                        Value="True">
                        <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey_Dark}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding IsReadOnly}"
                        Value="True">
                        <Setter Property="FontStyle" Value="Italic" />
                        <Setter Property="Foreground" Value="{StaticResource WolvenKitTan50}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding IsDisplayAsReadOnly}"
                        Value="True">
                        <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey1}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- Text block -->
            <Style
                x:Key="PropertyValueStyle"
                TargetType="TextBlock">
                <Style.Triggers>
                    <DataTrigger
                        Binding="{Binding Value,
                                          Mode=OneWay,
                                          UpdateSourceTrigger=PropertyChanged}"
                        Value="null">
                        <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey1}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding IsDefault,
                                          Mode=OneWay,
                                          UpdateSourceTrigger=PropertyChanged}"
                        Value="True">
                        <Setter Property="FontStyle" Value="Italic" />
                        <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey_Dark}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding IsReadOnly}"
                        Value="True">
                        <Setter Property="Foreground" Value="{StaticResource WolvenKitTan50}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding IsDisplayAsReadOnly}"
                        Value="True">
                        <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey1}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding IsValueExtrapolated,
                                          Mode=OneWay,
                                          UpdateSourceTrigger=PropertyChanged}"
                        Value="True">
                        <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey_Dark}" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
            <!-- Property name -->
            <DataTemplate
                x:Key="PropertyNameTemplate"
                DataType="{x:Type shell:ChunkViewModel}">
                <Grid>
                    <Grid.Resources>
                        <Style
                            x:Key="ExpanderHider"
                            TargetType="TextBlock">
                            <Setter Property="Visibility" Value="Collapsed" />
                            <Style.Triggers>
                                <DataTrigger
                                    Binding="{Binding IsMouseOver,
                                                      RelativeSource={RelativeSource AncestorType={x:Type syncfusion:TreeViewItem}}}"
                                    Value="True">
                                    <Setter Property="Visibility" Value="Collapsed" />
                                </DataTrigger>
                                <DataTrigger
                                    Binding="{Binding IsDefault,
                                                      Mode=OneWay,
                                                      UpdateSourceTrigger=PropertyChanged}"
                                    Value="True">
                                    <Setter Property="FontStyle" Value="Italic" />
                                    <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey_Dark}" />
                                </DataTrigger>
                                <DataTrigger
                                    Binding="{Binding IsReadOnly}"
                                    Value="True">
                                    <Setter Property="Foreground" Value="{StaticResource WolvenKitTan50}" />
                                </DataTrigger>
                                <DataTrigger Binding="{Binding IsDisplayAsReadOnly}">
                                    <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey1}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Resources>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <TextBlock
                        Grid.Column="0"
                        Style="{StaticResource PropertyKeyStyle}"
                        Text="{Binding DisplayName,
                                       Mode=OneWay,
                                       UpdateSourceTrigger=PropertyChanged}" />

                    <TextBlock
                        Grid.Column="1"
                        Margin="{DynamicResource WolvenKitMarginTinyRight}"
                        VerticalAlignment="Center"
                        Foreground="{StaticResource ForegroundColor_Grey1}"
                        Style="{StaticResource ExpanderHider}"
                        Text="{Binding Type,
                                       StringFormat=' {0}'}" />
                </Grid>
            </DataTemplate>

            <!-- GroupedPropertyNameTemplate for GroupedChunkViewModel -->
            <DataTemplate
                x:Key="GroupedPropertyNameTemplate"
                DataType="{x:Type shell:GroupedChunkViewModel}">
                <Grid>
                    <TextBlock
                        Width="Auto"
                        VerticalAlignment="Center"
                        Text="{Binding DisplayName}" />
                </Grid>
            </DataTemplate>

            <!-- PropertyValueTemplate for ChunkViewModel -->
            <DataTemplate
                x:Key="PropertyValueTemplate"
                DataType="{x:Type shell:ChunkViewModel}">
                <Grid>
                    <Grid.Resources>
                        <Style TargetType="{x:Type TextBlock}">
                            <Style.Triggers>
                                <DataTrigger
                                    Binding="{Binding IsDefault,
                                                      Mode=OneWay,
                                                      UpdateSourceTrigger=PropertyChanged}"
                                    Value="True">
                                    <Setter Property="FontStyle" Value="Italic" />
                                    <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey_Dark}" />
                                </DataTrigger>
                                <DataTrigger
                                    Binding="{Binding IsReadOnly,
                                                      Mode=OneWay,
                                                      UpdateSourceTrigger=PropertyChanged}"
                                    Value="True">
                                    <Setter Property="FontStyle" Value="Italic" />
                                </DataTrigger>
                                <DataTrigger
                                    Binding="{Binding IsDisplayAsReadOnly,
                                                      Mode=OneWay,
                                                      UpdateSourceTrigger=PropertyChanged}"
                                    Value="True">
                                    <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey1}" />
                                </DataTrigger>
                                <DataTrigger
                                    Binding="{Binding IsReadOnly,
                                                      Mode=OneWay,
                                                      UpdateSourceTrigger=PropertyChanged}"
                                    Value="True">
                                    <Setter Property="FontStyle" Value="Italic" />
                                </DataTrigger>
                                <DataTrigger
                                    Binding="{Binding IsDisplayAsReadOnly,
                                                      Mode=OneWay,
                                                      UpdateSourceTrigger=PropertyChanged}"
                                    Value="True">
                                    <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey1}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                        <Style TargetType="{x:Type iconPacks:PackIconCodicons}">
                            <Style.Triggers>
                                <DataTrigger
                                    Binding="{Binding IsDefault,
                                                      Mode=OneWay,
                                                      UpdateSourceTrigger=PropertyChanged}"
                                    Value="True">
                                    <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey_Dark}" />
                                </DataTrigger>
                                <DataTrigger
                                    Binding="{Binding IsReadOnly,
                                                      Mode=OneWay,
                                                      UpdateSourceTrigger=PropertyChanged}"
                                    Value="True">
                                    <Setter Property="FontStyle" Value="Italic" />
                                </DataTrigger>
                                <DataTrigger
                                    Binding="{Binding IsDisplayAsReadOnly,
                                                      Mode=OneWay,
                                                      UpdateSourceTrigger=PropertyChanged}"
                                    Value="True">
                                    <Setter Property="Foreground" Value="{StaticResource ForegroundColor_Grey1}" />
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Grid.Resources>

                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="{DynamicResource WolvenKitRedTreeIconColumnWidth}" />
                        <ColumnDefinition Width="Auto" />
                        <ColumnDefinition Width="*" />
                    </Grid.ColumnDefinitions>

                    <iconPacks:PackIconCodicons
                        Kind="{Binding Extension}"
                        Width="{DynamicResource WolvenKitIconMicro}"
                        Height="{DynamicResource WolvenKitIconMicro}"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center" />

                    <StackPanel
                        Name="PropertyTypeDescriptor"
                        Grid.Column="1"
                        Margin="{DynamicResource WolvenKitMarginTinyRight}"
                        Style="{StaticResource VisibleOnEmptyValueStyle}"
                        Orientation="Horizontal">
                        <TextBlock
                            Name="PropertyType"
                            Foreground="{StaticResource WolvenKitTan}"
                            Text="{Binding Type}" />
                        <!-- icon -->
                        <StackPanel Orientation="Horizontal">
                            <StackPanel.Style>
                                <Style TargetType="StackPanel">
                                    <Style.Triggers>
                                        <DataTrigger
                                            Binding="{Binding TypesDiffer,
                                                              Mode=OneWay,
                                                              UpdateSourceTrigger=PropertyChanged}"
                                            Value="False">
                                            <Setter Property="Visibility" Value="Collapsed" />
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </StackPanel.Style>

                            <iconPacks:PackIconCodicons
                                Kind="ArrowRight"
                                Height="{DynamicResource WolvenKitIconNano}"
                                Margin="{DynamicResource WolvenKitMarginTinyHorizontal}"
                                VerticalAlignment="Center" />

                            <TextBlock
                                Foreground="{StaticResource WolvenKitTan}"
                                Text="{Binding ResolvedType,
                                               Mode=OneWay,
                                               UpdateSourceTrigger=PropertyChanged}" />
                        </StackPanel>
                    </StackPanel>

                    <StackPanel
                        Grid.Column="2"
                        Margin="{DynamicResource WolvenKitMarginTinyRight}"
                        Orientation="Horizontal">
                        <TextBlock
                            Name="PropertyDescriptor"
                            Margin="{DynamicResource WolvenKitMarginTinyRight}"
                            Style="{StaticResource PropertyKeyStyle}"
                            Text="{Binding Descriptor,
                                           Mode=OneWay,
                                           UpdateSourceTrigger=PropertyChanged}"
                            TextTrimming="CharacterEllipsis" />

                        <TextBlock
                            Name="PropertyValue"
                            Style="{StaticResource PropertyValueStyle}"
                            Text="{Binding Value,
                                           Mode=OneWay,
                                           UpdateSourceTrigger=PropertyChanged}"
                            TextTrimming="CharacterEllipsis" />
                    </StackPanel>
                </Grid>
            </DataTemplate>

            <!-- ArrayNameColumnWidth for ColumnDefinition -->
            <Style
                x:Key="ArrayNameColumnWidth"
                TargetType="ColumnDefinition">
                <Setter Property="Width" Value="{DynamicResource WolvenKitRedTreeArrayColumnWidthLvl0}" />
                <Style.Triggers>
                    <DataTrigger
                        Binding="{Binding Level}"
                        Value="1">
                        <Setter Property="Width" Value="{DynamicResource WolvenKitRedTreeArrayColumnWidthLvl1}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding Level}"
                        Value="2">
                        <Setter Property="Width" Value="{DynamicResource WolvenKitRedTreeArrayColumnWidthLvl2}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding Level}"
                        Value="3">
                        <Setter Property="Width" Value="{DynamicResource WolvenKitRedTreeArrayColumnWidthLvl3}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding Level}"
                        Value="4">
                        <Setter Property="Width" Value="{DynamicResource WolvenKitRedTreeArrayColumnWidthLvl4}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding Level}"
                        Value="5">
                        <Setter Property="Width" Value="{DynamicResource WolvenKitRedTreeArrayColumnWidthLvl5}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding Level}"
                        Value="6">
                        <Setter Property="Width" Value="{DynamicResource WolvenKitRedTreeArrayColumnWidthLvl6}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding Level}"
                        Value="7">
                        <Setter Property="Width" Value="{DynamicResource WolvenKitRedTreeArrayColumnWidthLvl6}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding Level}"
                        Value="8">
                        <Setter Property="Width" Value="{DynamicResource WolvenKitRedTreeArrayColumnWidthLvl6}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding Level}"
                        Value="9">
                        <Setter Property="Width" Value="{DynamicResource WolvenKitRedTreeArrayColumnWidthLvl6}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding Level}"
                        Value="10">
                        <Setter Property="Width" Value="{DynamicResource WolvenKitRedTreeArrayColumnWidthLvl6}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding IsInArray}"
                        Value="True">
                        <Setter Property="Width" Value="{Binding ArrayIndexWidth}" />
                    </DataTrigger>
                    <DataTrigger
                        Binding="{Binding DisplayName,
                                          Mode=OneWay,
                                          UpdateSourceTrigger=PropertyChanged}"
                        Value="{x:Null}">
                        <Setter Property="Width" Value="0" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>

            <!-- Context menu -->
            <!--
                Opened="TreeViewContextMenu_OnOpened"
                Closed="TreeViewContextMenu_OnClosed"
                KeyUp="TreeViewContextMenu_OnKeyChanged"
                KeyDown="TreeViewContextMenu_OnKeyChanged"
            -->
            <!-- Converter for the right-hand properties that decides which partial to render -->
            <converters:TreeViewItemTemplateSelector
                x:Key="itemTemplateSelector"
                x:Name="itemTemplateSelector">

                <converters:TreeViewItemTemplateSelector.GroupedTemplate>
                    <DataTemplate>
                        <Grid
                            HorizontalAlignment="Left"
                            Background="Transparent"
                            Tag="{Binding}">
                            <ContentPresenter
                                Width="Auto"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"
                                ContentTemplate="{StaticResource GroupedPropertyNameTemplate}" />
                        </Grid>
                    </DataTemplate>
                </converters:TreeViewItemTemplateSelector.GroupedTemplate>

                <converters:TreeViewItemTemplateSelector.PropertyTemplate>
                    <DataTemplate DataType="{x:Type shell:ChunkViewModel}">
                        <Grid
                            HorizontalAlignment="Left"
                            Background="Transparent"
                            Tag="{Binding}"
                            ToolTip="{Binding Type}">
                            <!--<Grid.CommandBindings>
                                <CommandBinding
                                    CanExecute="Copy_CanExecute"
                                    Command="ApplicationCommands.Copy"
                                    Executed="Copy_Executed" />
                            </Grid.CommandBindings>-->
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Style="{StaticResource ArrayNameColumnWidth}" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter
                                Grid.Column="0"
                                Width="Auto"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"
                                ContentTemplate="{StaticResource PropertyNameTemplate}" />
                            <ContentPresenter
                                Grid.Column="2"
                                Width="Auto"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"
                                ContentTemplate="{StaticResource PropertyValueTemplate}" />
                        </Grid>
                    </DataTemplate>
                </converters:TreeViewItemTemplateSelector.PropertyTemplate>

                <converters:TreeViewItemTemplateSelector.ArrayTemplate>
                    <DataTemplate>
                        <Grid
                            HorizontalAlignment="Left"
                            Background="Transparent"
                            Tag="{Binding}"
                            ToolTip="{Binding Type}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Style="{StaticResource ArrayNameColumnWidth}" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter
                                Grid.Column="0"
                                Width="Auto"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"
                                ContentTemplate="{StaticResource PropertyNameTemplate}" />
                            <ContentPresenter
                                Grid.Column="2"
                                Width="Auto"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"
                                ContentTemplate="{StaticResource PropertyValueTemplate}" />
                        </Grid>
                    </DataTemplate>
                </converters:TreeViewItemTemplateSelector.ArrayTemplate>

                <converters:TreeViewItemTemplateSelector.HandleTemplate>
                    <DataTemplate>
                        <Grid
                            HorizontalAlignment="Left"
                            Background="Transparent"
                            Tag="{Binding}"
                            ToolTip="{Binding Type}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Style="{StaticResource ArrayNameColumnWidth}" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>

                            <ContentPresenter
                                Grid.Column="0"
                                Width="Auto"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"
                                ContentTemplate="{StaticResource PropertyNameTemplate}" />

                            <ContentPresenter
                                Grid.Column="1"
                                Width="Auto"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"
                                ContentTemplate="{StaticResource PropertyValueTemplate}" />
                        </Grid>
                    </DataTemplate>
                </converters:TreeViewItemTemplateSelector.HandleTemplate>

                <converters:TreeViewItemTemplateSelector.RefTemplate>
                    <DataTemplate>
                        <Grid
                            HorizontalAlignment="Left"
                            Background="Transparent"
                            Tag="{Binding}"
                            ToolTip="{Binding Type}">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Style="{StaticResource ArrayNameColumnWidth}" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" MinWidth="20" />
                                <ColumnDefinition Width="Auto" MinWidth="20" />
                            </Grid.ColumnDefinitions>

                            <ContentPresenter
                                Grid.Column="0"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"
                                ContentTemplate="{StaticResource PropertyNameTemplate}" />

                            <!--iconPacks:PackIconCodicons Kind="References" Height="14" Grid.Column="1"
                                    Width="14" VerticalAlignment="Center" HorizontalAlignment="Center"  Margin="0,0,6,0" />
                                <TextBlock Text="{Binding Value}" Grid.Column="2" /-->

                            <ContentPresenter
                                Grid.Column="1"
                                HorizontalAlignment="Stretch"
                                VerticalAlignment="Center"
                                ContentTemplate="{StaticResource PropertyValueTemplate}" />
                            <!-- TODO MB -->
                            <!--<Button
                                Grid.Column="2"
                                Margin="{DynamicResource WolvenKitMarginTinyLeft}"
                                Background="Transparent"
                                Style="{StaticResource ButtonCustom}"
                                Command="{Binding OpenRefCommand}"
                                ToolTip="Open in new tab">
                            -->
                            <!-- Old icon Vaadin#ArrowCircleUp#45deg -->
                            <!--
                                <iconPacks:PackIconMaterial
                                    Kind="TabPlus"
                                    Width="{DynamicResource WolvenKitIconMilli}"
                                    Height="{DynamicResource WolvenKitIconMilli}"
                                    Margin="{DynamicResource WolvenKitMarginTinyRight}"
                                    Foreground="{StaticResource WolvenKitCyan}" />
                            </Button>

                            <Button
                                Grid.Column="3"
                                Margin="{DynamicResource WolvenKitMarginTinyLeft}"
                                Background="Transparent"
                                Style="{StaticResource ButtonCustom}"
                                Command="{Binding AddRefCommand}"
                                ToolTip="Add File to Mod">
                                <iconPacks:PackIconVaadinIcons
                                    Kind="ArrowCircleLeft"
                                    Width="{DynamicResource WolvenKitIconMilli}"
                                    Height="{DynamicResource WolvenKitIconMilli}"
                                    Foreground="{StaticResource WolvenKitYellow}" />
                            </Button>-->
                        </Grid>
                    </DataTemplate>
                </converters:TreeViewItemTemplateSelector.RefTemplate>
            </converters:TreeViewItemTemplateSelector>
        </ResourceDictionary>
    </UserControl.Resources>

    <!-- ChildPropertyName="TVProperties" -->
    <syncfusion:SfTreeView x:Name="TreeView">

        <!--<syncfusion:SfTreeView.DragPreviewTemplate>
            <DataTemplate DataType="{x:Type syncfusion:TreeViewDragInfo}">
                <Border
                    BorderBrush="{StaticResource BorderAlt}"
                    BorderThickness="1">
                    <Grid Background="{StaticResource ContentBackgroundAlt2}">
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition />
                        </Grid.RowDefinitions>

                        <TextBlock
                            Grid.Row="0"
                            Margin="{DynamicResource WolvenKitMarginTiny}"
                            VerticalAlignment="Center"
                            Visibility="{Binding Data[0].Content.IsCtrlKeyPressed,
                                                 Converter={StaticResource BooleanToVisibilityConverter}}"
                            Text="Duplicate item to this index (release control to move)" />

                        <TextBlock
                            Grid.Row="0"
                            Margin="{DynamicResource WolvenKitMarginTiny}"
                            VerticalAlignment="Center"
                            Visibility="{Binding Data[0].Content.IsCtrlKeyPressed,
                                                 Converter={StaticResource InvertBooleanVisibilityConverter}}"
                            Text="Move item to this index (hold control to duplicate)" />

                        <StackPanel
                            Grid.Row="1"
                            Orientation="Horizontal">
                            <TextBlock
                                Margin="{DynamicResource WolvenKitMarginTiny}"
                                VerticalAlignment="Center"
                                Foreground="{StaticResource WolvenKitTan}"
                                Text="{Binding Data[0].Content.Type}" />

                            <TextBlock
                                Margin="{DynamicResource WolvenKitMarginTiny}"
                                VerticalAlignment="Center"
                                Text="{Binding Data[0].Content.Descriptor}" />
                        </StackPanel>
                    </Grid>
                </Border>
            </DataTemplate>
        </syncfusion:SfTreeView.DragPreviewTemplate>-->

    </syncfusion:SfTreeView>

</reactiveUi:ReactiveUserControl>
